<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Link - Attendlog </title>
    <link rel="stylesheet" href="/static/css/index.css">
</head>
<body class="font-inter">
<div id="flashContainer" class="toast toast-top toast-end z-50">
    <p id="flashBox" class="hidden rounded-xl">{{.flashMessage}}</p>
    <div id="alertBox" class="alert text-white">
        <p id="flashText" class="max-w-xs h-fit"></p>
    </div>
</div>
<header class="px-5 py-5 flex justify-between items-center bg-gray-200">
    <div class="w-10 h-10">
        <img src="/static/images/logo.webp" alt="Attendlog logo">
    </div>

    <p class="capitalize">Hi, {{.UserName}}</p>
</header>

<main class="px-5">
    <h1 class="my-5">{{ .Link.Title }}</h1>

    <form id="createLinkForm" method="post" action="/attendance" class="mt-5 space-y-5">
        {{.csrfField}}
        <fieldset class="form-control w-full">
            <label for="firstName" class="label">
                <span class="label-text">First Name</span>
            </label>
            <input
                    id="firstName"
                    name="first_name"
                    type="text"
                    placeholder="Please enter your first name"
                    class="input input-bordered w-full"
            />
        </fieldset>

        <fieldset class="form-control w-full">
            <label for="lastName" class="label">
                <span class="label-text">Last Name</span>
            </label>
            <input
                    id="lastName"
                    name="last_name"
                    type="text"
                    placeholder="Please enter your last name"
                    class="input input-bordered w-full"
            />
        </fieldset>

        <fieldset class="form-control w-full">
            <label for="email" class="label">
                <span class="label-text">Email Address</span>
            </label>
            <input
                    id="email"
                    name="email_address"
                    type="email"
                    placeholder="Please enter your E-mail"
                    class="input input-bordered w-full"
            />
        </fieldset>

        <input type="hidden" name="signature" id="signatureInput" />

        <div class="w-full">
            <button class="btn w-full bg-black text-white">
                Submit
            </button>
        </div>
    </form>
</main>

<script src="/static/js/flash.js"></script>
<script src="/static/js/toast.js"></script>
<script src="/static/js/distance.js"></script>
<script src="https://cdn.jsdelivr.net/npm/signature_pad@4.1.7/dist/signature_pad.umd.min.js"></script>
<script>
    const createLinkForm = document.getElementById('createLinkForm')
    const cLink = {{ .Link }}
    let isUserWithinLocation = false;
    let signaturePad

    if (cLink.HasSignature) {
        console.log(createLinkForm.childNodes)
        const container = document.createElement('div')
        const label = document.createElement('p')
        label.innerHTML = 'Signature'
        const canvas = document.createElement('canvas')
        canvas.classList.add('border', 'rounded-md', 'w-full')

        container.append(label, canvas)
       const refNode = createLinkForm.childNodes[9]
        createLinkForm.insertBefore(container, refNode)
        signaturePad = new SignaturePad(canvas);
    }

    const signatureInput = document.getElementById('signatureInput')
    signaturePad.addEventListener('endStroke', () => {
        signatureInput.value = signaturePad.toDataURL()
    })

    createLinkForm.addEventListener('submit', (ev) => {
        if (cLink.HasLocationRestriction && !isUserWithinLocation) {
            ev.preventDefault()
        }
    })

    const showPosition = (position) => {
        const lat = position.coords.latitude.toFixed(6)
        const long = position.coords.longitude.toFixed(6)
       const distance = distanceBtwTwoPoints(lat, cLink.Latitude, long, cLink.Longitude)
       if (distance > 1) {
           createLinkForm.innerHTML = 'You are not in right location!'
       }
       isUserWithinLocation = true;
    }

    const showError = (error) => {
        createLinkForm.innerHTML = 'You are not in right location!'
        switch(error.code) {
            case error.PERMISSION_DENIED:
                showToast({
                    'type': 'error',
                    'message': "User denied the request for Geolocation."
                })
                break;
            case error.POSITION_UNAVAILABLE:
                showToast({
                    'type': 'error',
                    'message': "Location information is unavailable."
                })
                break;
            case error.TIMEOUT:
                showToast({
                    'type': 'error',
                    'message': "The request to get user location timed out."
                })
                break;
            default:
                showToast({
                    'type': 'error',
                    'message': "An unknown error occurred."
                })
                break;
        }
    }

    if (cLink.HasLocationRestriction) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError)
        } else {
            showToast({
                'type': 'error',
                'message': "Your browser does not have geolocation enabled"
            })
        }
    }
</script>
</body>
</html>